" If you don't understand a setting in here, just type ':h setting'.

" Editor settings
set linebreak
set ignorecase
set smartcase
set number
set relativenumber
set colorcolumn=81

" Set Clipboard
set clipboard=unnamedplus

" TAB settings
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Window settings
set splitright
set splitbelow

" Set Leader key
let mapleader = ","

" Backup settings
set backupdir=~/.local/share/nvim/backup
set directory=~/.local/share/nvim/swap
set nowritebackup

" Map the missing Y yank
nnoremap Y y$

" Plugin manager
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'

Plug 'tmux-plugins/vim-tmux'
Plug 'christoomey/vim-tmux-navigator'

Plug 'mhinz/vim-startify'
Plug 'lifepillar/vim-solarized8'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'edkolev/tmuxline.vim'

Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}

Plug 'tpope/vim-vinegar'
Plug 'justinmk/vim-gtfo'

Plug 'Shougo/unite.vim'
Plug 'Shougo/neoyank.vim'

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'

Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'terryma/vim-multiple-cursors'

Plug 'tpope/vim-abolish'

Plug 'janko-m/vim-test'
Plug 'benmills/vimux'
Plug 'benekastah/neomake'
Plug 'editorconfig/editorconfig-vim'

Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-endwise'

Plug 'moll/vim-node'
Plug 'andorov/vim-emblem'
Plug 'joukevandermaas/vim-ember-hbs'

Plug 'rust-lang/rust.vim'

call plug#end()


" Theme
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
colorscheme solarized8_dark

" EditorConfig settings
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" Allow powerline symbols to show up
let g:airline_powerline_fonts = 1

" Explorer settings
let g:netrw_preview = 1
let g:netrw_alto = 0
let g:netrw_winsize = 25

" Vim test mappings
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>


" Unite settings

" Config Ag and use it instead of find
let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']

" Configure Ag and use it instead of grep
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--follow --nocolor --nogroup --smart-case --hidden'
let g:unite_source_grep_recursive_opt = ''

" Unite sources
call unite#custom#source('file_rec/neovim,buffer', 'matchers', ['converter_relative_word', 'matcher_fuzzy'])
call unite#custom#source('file_rec/neovim,buffer', 'sorters', 'sorter_rank')

" Unite keymaps
nnoremap <leader>f :<C-u>Unite -no-split -buffer-name=files   -start-insert -ignorecase file_rec/neovim:!<cr>
nnoremap <leader>b :<C-u>Unite -no-split -buffer-name=buffer  -start-insert -ignorecase buffer<cr>
nnoremap <leader>s :<C-u>Unite -no-split -buffer-name=grep    grep<cr>
nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>

" Neovim terminal mappings
if has('nvim')
  tnoremap <ESC> <C-\><C-n>
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l
endif


" Neomake settings

" Run neomake on buffer write
autocmd! BufWritePost * Neomake

" Preserve the cursor position when loclist or quickfix window is opened
let g:neomake_open_list = 2

" Makers
let g:neomake_javascript_enabled_makers = ['jshint']

" make test commands execute using vimux
let test#strategy = 'vimux'
let g:VimuxHeight = "30"
